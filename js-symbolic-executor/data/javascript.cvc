% Copyright 2010 Google Inc.
%
% Licensed under the Apache License, Version 2.0 (the "License");
% you may not use this file except in compliance with the License.
% You may obtain a copy of the License at
%
%     http://www.apache.org/licenses/LICENSE-2.0
%
% Unless required by applicable law or agreed to in writing, software
% distributed under the License is distributed on an "AS IS" BASIS,
% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
% See the License for the specific language governing permissions and
% limitations under the License.

% This file depends on string.cvc

% The type of JavaScript values (excluding objects)
DATATYPE
  JSType =
    js_true
  | js_false
  | js_null
  | js_undefined
  | js_NaN
  | js_num (get_num : INT)
  | js_string (get_str : String)
END;

JSNumber : TYPE = SUBTYPE(LAMBDA(x:JSType): is_js_NaN(x) OR is_js_num(x), js_NaN);
JSBool : TYPE = SUBTYPE(LAMBDA(x:JSType): is_js_true(x) OR is_js_false(x), js_true);
JSString : TYPE = SUBTYPE(is_js_string, js_string(char_nil));

string_to_num: String -> JSNumber;
int_to_string: INT -> String;

% ECMA-262 9.3
js_ToNumber: JSType -> JSNumber =
  LAMBDA(x:JSType):
    IF is_js_true(x) THEN js_num(1)
    ELSIF is_js_false(x) OR is_js_null(x) THEN js_num(0)
    ELSIF is_js_undefined(x) OR is_js_NaN(x) THEN js_NaN
    ELSIF is_js_num(x) THEN x
    ELSE string_to_num(get_str(x))
    ENDIF;

% ECMA-262 9.8
js_ToString: JSType -> String =
  LAMBDA(x:JSType):
    IF is_js_true(x) THEN strConst_true
    ELSIF is_js_false(x) THEN strConst_false
    ELSIF is_js_null(x) THEN strConst_null
    ELSIF is_js_undefined(x) THEN strConst_undefined
    ELSIF is_js_NaN(x) THEN strConst_NaN
    ELSIF is_js_num(x) THEN int_to_string(get_num(x))
    ELSE get_str(x)
    ENDIF;

% ECMA-262 9.2
toBoolean: JSType -> BOOLEAN =
  LAMBDA (x:JSType): is_js_true(x) OR (is_js_num(x) AND NOT(get_num(x) = 0))
    OR (is_js_string(x) AND is_char_cons(get_str(x)));
js_ToBoolean: JSType -> JSBool =
  LAMBDA (x: JSType): IF toBoolean(x) THEN js_true ELSE js_false ENDIF;

% Logical operators that return boolean
jsnot: JSType -> JSBool =
  LAMBDA (x:JSType): IF toBoolean(x) THEN js_false ELSE js_true ENDIF;
jseq: (JSType, JSType) -> JSBool =
  LAMBDA (x,y : JSType):
    IF is_js_NaN(x) OR is_js_NaN(y) THEN js_false
    ELSIF x = y THEN js_true
    ELSE js_false
    ENDIF;
jsne: (JSType, JSType) -> JSBool =
  LAMBDA (x,y : JSType):
    IF is_js_NaN(x) OR is_js_NaN(y) THEN js_true
    ELSIF x = y THEN js_false
    ELSE js_true
    ENDIF;

% Logical operators that return one of their arguments
jsite: (JSType, JSType, JSType) -> JSType =
  LAMBDA (x,y,z: JSType): IF toBoolean(x) THEN y ELSE z ENDIF;
jsor : (JSType, JSType) -> JSType =
  LAMBDA (x, y: JSType): IF toBoolean(x) THEN x ELSE y ENDIF;
jsand : (JSType, JSType) -> JSType =
  LAMBDA (x, y: JSType): IF toBoolean(x) THEN y ELSE x ENDIF;

% For all of the remaining operators, I have to do more thinking about what the
% input to CVC3 will look like: how much conversion between types will be done
% on the JavaScript side, and how much will I have to do here.

% For now, I'm pretending that the only values that can reach jsneg and jsminus
% are numbers, that only strings and numbers reach jsplus, and that either two
% strings or two non-strings reach the comparisons. But I'm pretty sure this
% will have to change eventually.

jsneg : JSNumber -> JSNumber =
  LAMBDA (x: JSNumber):
    IF is_js_NaN(x) THEN x
    ELSE js_num(- get_num(x))
    ENDIF;

jsminus : (JSNumber, JSNumber) -> JSNumber =
  LAMBDA (x, y: JSNumber):
    IF is_js_NaN(x) OR is_js_NaN(y) THEN js_NaN
    ELSE js_num(get_num(x) - get_num(y))
    ENDIF;

JSNumberOrString : TYPE =
  SUBTYPE(LAMBDA(x:JSType): is_js_NaN(x) OR is_js_num(x) OR is_js_string(x),
    % Witness for type non-emptiness:
    js_NaN);

jsplus : (JSNumberOrString, JSNumberOrString) -> JSNumberOrString =
  LAMBDA (x, y: JSNumberOrString):
    % If one is a string, both are.
    IF is_js_string(x) THEN js_string(concat(get_str(x), get_str(y)))
    % If either is NaN, the answer is NaN
    ELSIF is_js_NaN(x) OR is_js_NaN(y) THEN js_NaN
    % Otherwise, both are non-NaN numbers
    ELSE js_num(get_num(x) + get_num(y))
    ENDIF;

DATATYPE
  ternary = ternary_true | ternary_false | ternary_undefined
END;

% abstract_lt implements the Abstract Relational Comparison Algorithm: ECMA-262,
% 11.8.5 . It evaluates to undefined if either operand is NaN; otherwise, it
% evaluates to (the value of) x < y.

abstract_lt : (JSType, JSType) -> ternary =
  LAMBDA (x, y: JSType):
    IF is_js_string(x) % x is a string, so y must be, too.
    THEN
      IF string_less_than(get_str(x), get_str(y))
      THEN ternary_true
      ELSE ternary_false
      ENDIF
    ELSE
      LET x_num = js_ToNumber(x) IN
      IF is_js_NaN(x_num) THEN ternary_undefined
      ELSE
        LET y_num = js_ToNumber(y) IN
        IF is_js_NaN(y_num) THEN ternary_undefined
        ELSIF get_num(x) < get_num(y) THEN ternary_true
        ELSE ternary_false
        ENDIF
      ENDIF
    ENDIF;

jslt: (JSType, JSType) -> JSBool =
  LAMBDA (x, y: JSType):
    IF is_ternary_true(abstract_lt(x, y)) THEN js_true ELSE js_false ENDIF;
jsgt : (JSType, JSType) -> JSBool =
  LAMBDA (x, y: JSType):
    IF is_ternary_true(abstract_lt(y, x)) THEN js_true ELSE js_false ENDIF;
jsle : (JSType, JSType) -> JSBool =
  LAMBDA (x, y: JSType):
    IF is_ternary_false(abstract_lt(y, x)) THEN js_true ELSE js_false ENDIF;
jsge : (JSType, JSType) -> JSBool =
  LAMBDA (x, y: JSType):
    IF is_ternary_false(abstract_lt(x, y)) THEN js_true ELSE js_false ENDIF;
